// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package talend_test.testing_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.nombre_vue_normalizer;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: testing Purpose: first test for the course<br>
 * Description: well i don't know why <br>
 * 
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status
 */
public class testing implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "testing";
	private final String projectName = "TALEND_TEST";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					testing.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(testing.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_TMAP_OUT_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tMap_1_TMAP_IN_error(exception, errorComponent, globalMap);

	}

	public void tMap_1_TMAP_IN_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class youtube_infoStruct implements routines.system.IPersistableRow<youtube_infoStruct> {
		final static byte[] commonByteArrayLock_TALEND_TEST_testing = new byte[0];
		static byte[] commonByteArray_TALEND_TEST_testing = new byte[0];

		public String album;

		public String getAlbum() {
			return this.album;
		}

		public String artist;

		public String getArtist() {
			return this.artist;
		}

		public Integer nombre_vue;

		public Integer getNombre_vue() {
			return this.nombre_vue;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALEND_TEST_testing.length) {
					if (length < 1024 && commonByteArray_TALEND_TEST_testing.length == 0) {
						commonByteArray_TALEND_TEST_testing = new byte[1024];
					} else {
						commonByteArray_TALEND_TEST_testing = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALEND_TEST_testing, 0, length);
				strReturn = new String(commonByteArray_TALEND_TEST_testing, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALEND_TEST_testing) {

				try {

					int length = 0;

					this.album = readString(dis);

					this.artist = readString(dis);

					this.nombre_vue = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.album, dos);

				// String

				writeString(this.artist, dos);

				// Integer

				writeInteger(this.nombre_vue, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("album=" + album);
			sb.append(",artist=" + artist);
			sb.append(",nombre_vue=" + String.valueOf(nombre_vue));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(youtube_infoStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_TALEND_TEST_testing = new byte[0];
		static byte[] commonByteArray_TALEND_TEST_testing = new byte[0];

		public String song;

		public String getSong() {
			return this.song;
		}

		public String album;

		public String getAlbum() {
			return this.album;
		}

		public Integer year;

		public Integer getYear() {
			return this.year;
		}

		public String artist;

		public String getArtist() {
			return this.artist;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALEND_TEST_testing.length) {
					if (length < 1024 && commonByteArray_TALEND_TEST_testing.length == 0) {
						commonByteArray_TALEND_TEST_testing = new byte[1024];
					} else {
						commonByteArray_TALEND_TEST_testing = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALEND_TEST_testing, 0, length);
				strReturn = new String(commonByteArray_TALEND_TEST_testing, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALEND_TEST_testing) {

				try {

					int length = 0;

					this.song = readString(dis);

					this.album = readString(dis);

					this.year = readInteger(dis);

					this.artist = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.song, dos);

				// String

				writeString(this.album, dos);

				// Integer

				writeInteger(this.year, dos);

				// String

				writeString(this.artist, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("song=" + song);
			sb.append(",album=" + album);
			sb.append(",year=" + String.valueOf(year));
			sb.append(",artist=" + artist);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_1Struct
			implements routines.system.IPersistableRow<after_tFileInputDelimited_1Struct> {
		final static byte[] commonByteArrayLock_TALEND_TEST_testing = new byte[0];
		static byte[] commonByteArray_TALEND_TEST_testing = new byte[0];

		public String song;

		public String getSong() {
			return this.song;
		}

		public String album;

		public String getAlbum() {
			return this.album;
		}

		public Integer year;

		public Integer getYear() {
			return this.year;
		}

		public String artist;

		public String getArtist() {
			return this.artist;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALEND_TEST_testing.length) {
					if (length < 1024 && commonByteArray_TALEND_TEST_testing.length == 0) {
						commonByteArray_TALEND_TEST_testing = new byte[1024];
					} else {
						commonByteArray_TALEND_TEST_testing = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALEND_TEST_testing, 0, length);
				strReturn = new String(commonByteArray_TALEND_TEST_testing, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALEND_TEST_testing) {

				try {

					int length = 0;

					this.song = readString(dis);

					this.album = readString(dis);

					this.year = readInteger(dis);

					this.artist = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.song, dos);

				// String

				writeString(this.album, dos);

				// Integer

				writeInteger(this.year, dos);

				// String

				writeString(this.artist, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("song=" + song);
			sb.append(",album=" + album);
			sb.append(",year=" + String.valueOf(year));
			sb.append(",artist=" + artist);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tFileInputDelimited_2Process(globalMap);

				row1Struct row1 = new row1Struct();
				youtube_infoStruct youtube_info = new youtube_infoStruct();

				/**
				 * [tMap_1_TMAP_OUT begin ] start
				 */

				ok_Hash.put("tMap_1_TMAP_OUT", false);
				start_Hash.put("tMap_1_TMAP_OUT", System.currentTimeMillis());

				currentVirtualComponent = "tMap_1";

				currentComponent = "tMap_1_TMAP_OUT";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tMap_1_TMAP_OUT = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row2Struct>) ((org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row2Struct>) globalMap
						.get("tHash_Lookup_row2"));

				row2Struct row2HashKey = new row2Struct();
				row2Struct row2Default = new row2Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1_TMAP_OUT__Struct {
				}
				Var__tMap_1_TMAP_OUT__Struct Var__tMap_1_TMAP_OUT = new Var__tMap_1_TMAP_OUT__Struct();
// ###############################

// ###############################
// # Outputs initialization
// ###############################

				class SortableRow_tMap_1_1 implements Comparable<SortableRow_tMap_1_1>,
						routines.system.IPersistableRow<SortableRow_tMap_1_1> { // G_TM_B_001

					boolean is__rejectedInnerJoin;

					String exprKey_row2__nom_video;

					// row1
					String row1__song;
					String row1__album;
					Integer row1__year;
					String row1__artist;

					public void fillFrom(row1Struct row1, String exprKey_row2__nom_video) {

						this.row1__song = row1.song;

						this.row1__album = row1.album;

						this.row1__year = row1.year;

						this.row1__artist = row1.artist;

						this.exprKey_row2__nom_video = exprKey_row2__nom_video;

					}

					public void copyDataTo(row1Struct row1) {

						row1.song = this.row1__song;
						row1.album = this.row1__album;
						row1.year = this.row1__year;
						row1.artist = this.row1__artist;

					}

					public String toString() {

						StringBuilder sb = new StringBuilder();
						sb.append(super.toString());
						sb.append("[");

						sb.append("row1__song");
						sb.append("=");
						sb.append(String.valueOf(this.row1__song));

						sb.append(", ");

						sb.append("row1__album");
						sb.append("=");
						sb.append(String.valueOf(this.row1__album));

						sb.append(", ");

						sb.append("row1__year");
						sb.append("=");
						sb.append(String.valueOf(this.row1__year));

						sb.append(", ");

						sb.append("row1__artist");
						sb.append("=");
						sb.append(String.valueOf(this.row1__artist));

						sb.append("]");

						return sb.toString();
					}

					public int compareTo(SortableRow_tMap_1_1 other) {

						int returnValue = 0;

						returnValue = checkNullsAndCompare(this.exprKey_row2__nom_video, other.exprKey_row2__nom_video);
						if (returnValue != 0) {
							return returnValue;
						}

						return returnValue;
					}

					private int checkNullsAndCompare(Object object1, Object object2) {
						int returnValue = 0;
						if (object1 instanceof Comparable && object2 instanceof Comparable) {
							returnValue = ((Comparable) object1).compareTo(object2);
						} else if (object1 != null && object2 != null) {
							returnValue = compareStrings(object1.toString(), object2.toString());
						} else if (object1 == null && object2 != null) {
							returnValue = 1;
						} else if (object1 != null && object2 == null) {
							returnValue = -1;
						} else {
							returnValue = 0;
						}

						return returnValue;
					}

					private int compareStrings(String string1, String string2) {
						return string1.compareTo(string2);
					}

					public void readData(ObjectInputStream dis) {

						synchronized (row1Struct.commonByteArrayLock_TALEND_TEST_testing) {

							try {

								int length = 0;

								this.is__rejectedInnerJoin = dis.readBoolean();

								length = dis.readInt();
								if (length == -1) {
									this.row1__song = null;
								} else {
									if (length > row1Struct.commonByteArray_TALEND_TEST_testing.length) {
										if (length < 1024
												&& row1Struct.commonByteArray_TALEND_TEST_testing.length == 0) {
											row1Struct.commonByteArray_TALEND_TEST_testing = new byte[1024];
										} else {
											row1Struct.commonByteArray_TALEND_TEST_testing = new byte[2 * length];
										}
									}
									dis.readFully(row1Struct.commonByteArray_TALEND_TEST_testing, 0, length);
									this.row1__song = new String(row1Struct.commonByteArray_TALEND_TEST_testing, 0,
											length, utf8Charset);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row1__album = null;
								} else {
									if (length > row1Struct.commonByteArray_TALEND_TEST_testing.length) {
										if (length < 1024
												&& row1Struct.commonByteArray_TALEND_TEST_testing.length == 0) {
											row1Struct.commonByteArray_TALEND_TEST_testing = new byte[1024];
										} else {
											row1Struct.commonByteArray_TALEND_TEST_testing = new byte[2 * length];
										}
									}
									dis.readFully(row1Struct.commonByteArray_TALEND_TEST_testing, 0, length);
									this.row1__album = new String(row1Struct.commonByteArray_TALEND_TEST_testing, 0,
											length, utf8Charset);
								}

								length = dis.readByte();
								if (length == -1) {
									this.row1__year = null;
								} else {

									this.row1__year = dis.readInt();

								}

								length = dis.readInt();
								if (length == -1) {
									this.row1__artist = null;
								} else {
									if (length > row1Struct.commonByteArray_TALEND_TEST_testing.length) {
										if (length < 1024
												&& row1Struct.commonByteArray_TALEND_TEST_testing.length == 0) {
											row1Struct.commonByteArray_TALEND_TEST_testing = new byte[1024];
										} else {
											row1Struct.commonByteArray_TALEND_TEST_testing = new byte[2 * length];
										}
									}
									dis.readFully(row1Struct.commonByteArray_TALEND_TEST_testing, 0, length);
									this.row1__artist = new String(row1Struct.commonByteArray_TALEND_TEST_testing, 0,
											length, utf8Charset);
								}

								length = dis.readInt();
								if (length == -1) {
									this.exprKey_row2__nom_video = null;
								} else {
									if (length > row1Struct.commonByteArray_TALEND_TEST_testing.length) {
										if (length < 1024
												&& row1Struct.commonByteArray_TALEND_TEST_testing.length == 0) {
											row1Struct.commonByteArray_TALEND_TEST_testing = new byte[1024];
										} else {
											row1Struct.commonByteArray_TALEND_TEST_testing = new byte[2 * length];
										}
									}
									dis.readFully(row1Struct.commonByteArray_TALEND_TEST_testing, 0, length);
									this.exprKey_row2__nom_video = new String(
											row1Struct.commonByteArray_TALEND_TEST_testing, 0, length, utf8Charset);
								}

							} catch (IOException e) {
								throw new RuntimeException(e);

							}

						}
					}

					public void writeData(ObjectOutputStream dos) {
						try {

							dos.writeBoolean(this.is__rejectedInnerJoin);

							if (this.row1__song == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row1__song.getBytes(utf8Charset);
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row1__album == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row1__album.getBytes(utf8Charset);
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row1__year == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);

								dos.writeInt(this.row1__year);

							}

							if (this.row1__artist == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row1__artist.getBytes(utf8Charset);
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.exprKey_row2__nom_video == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.exprKey_row2__nom_video.getBytes(utf8Charset);
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

						} catch (IOException e) {
							throw new RuntimeException(e);
						}
					}

				} // G_TM_B_001

				org.talend.designer.components.lookup.persistent.PersistentRowSorterIterator<SortableRow_tMap_1_1> fsi_tMap_1_1 = new org.talend.designer.components.lookup.persistent.PersistentRowSorterIterator<SortableRow_tMap_1_1>(
						"/home/hicham/Downloads/TOS_DI-20200219_1130-V7.3.1/workspace/temp" + "/" + jobName
								+ "_tMapData_" + Thread.currentThread().getId() + "_" + pid + "_tMap_1_1",
						2000000) {
					public SortableRow_tMap_1_1 createRowInstance() {
						return new SortableRow_tMap_1_1();
					}
				};

				fsi_tMap_1_1.initPut();

				/**
				 * [tMap_1_TMAP_OUT begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				int limit_tFileInputDelimited_1 = -1;
				try {

					Object filename_tFileInputDelimited_1 = "/home/hicham/git-repositories/datascale/qualité_des_données/projet/data_quality _S2.csv";
					if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
						if (footer_value_tFileInputDelimited_1 > 0 || random_value_tFileInputDelimited_1 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
								"/home/hicham/git-repositories/datascale/qualité_des_données/projet/data_quality _S2.csv",
								"UTF-8", ",", "\n", false, 1, 0, limit_tFileInputDelimited_1, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_1 != null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();

						row1 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row1 = new row1Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_1 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_1 = 0;

							row1.song = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 1;

							row1.album = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 2;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.year = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"year", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}

							} else {

								row1.year = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 3;

							row1.artist = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row1 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */

						/**
						 * [tFileInputDelimited_1 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_begin ] stop
						 */
// Start of branch "row1"
						if (row1 != null) {

							/**
							 * [tMap_1_TMAP_OUT main ] start
							 */

							currentVirtualComponent = "tMap_1";

							currentComponent = "tMap_1_TMAP_OUT";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row1");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_1_TMAP_OUT = false;

							hasCasePrimitiveKeyWithNull_tMap_1_TMAP_OUT = false;

							String exprKey_row2__nom_video = row1.song;

							SortableRow_tMap_1_1 sortableRow_tMap_1_1 = fsi_tMap_1_1.getNextFreeRow();

							sortableRow_tMap_1_1.fillFrom(row1, exprKey_row2__nom_video);

							fsi_tMap_1_1.put(sortableRow_tMap_1_1);

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_1_TMAP_OUT = false;
							boolean mainRowRejected_tMap_1_TMAP_OUT = false;

							// ###############################

							tos_count_tMap_1_TMAP_OUT++;

							/**
							 * [tMap_1_TMAP_OUT main ] stop
							 */

							/**
							 * [tMap_1_TMAP_OUT process_data_begin ] start
							 */

							currentVirtualComponent = "tMap_1";

							currentComponent = "tMap_1_TMAP_OUT";

							/**
							 * [tMap_1_TMAP_OUT process_data_begin ] stop
							 */

							/**
							 * [tMap_1_TMAP_OUT process_data_end ] start
							 */

							currentVirtualComponent = "tMap_1";

							currentComponent = "tMap_1_TMAP_OUT";

							/**
							 * [tMap_1_TMAP_OUT process_data_end ] stop
							 */

						} // End of branch "row1"

						/**
						 * [tFileInputDelimited_1 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

					}
				} finally {
					if (!((Object) ("/home/hicham/git-repositories/datascale/qualité_des_données/projet/data_quality _S2.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_1 != null) {
							fid_tFileInputDelimited_1.close();
						}
					}
					if (fid_tFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tMap_1_TMAP_OUT end ] start
				 */

				currentVirtualComponent = "tMap_1";

				currentComponent = "tMap_1_TMAP_OUT";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tMap_1_TMAP_OUT", true);
				end_Hash.put("tMap_1_TMAP_OUT", System.currentTimeMillis());

				/**
				 * [tMap_1_TMAP_OUT end ] stop
				 */

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());

				currentComponent = "tLogRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "youtube_info");
				}

				int tos_count_tLogRow_1 = 0;

				///////////////////////

				class Util_tLogRow_1 {

					String[] des_top = { ".", "-" };

					String[] des_data = { "-", "+" };

					String[] des_frame = { "|" };

					public void printLine(StringBuilder sb, int titleWidth, int dataWidth) {

						sb.append("+");
						for (int i = 0; i < titleWidth + 2; i++)
							sb.append("-");
						sb.append("+");
						for (int i = 0; i < dataWidth + 2; i++)
							sb.append("-");
						sb.append("+" + "\n");
					}

					public String print(String[] row, int nbLine) {

						StringBuilder sb = new StringBuilder();

						String title = "#" + nbLine + ". " + "tLogRow_1--tLogRow_1";

						// step 1: get the max length of all the row[] member;
						int dataWidth = 5; // the length of the string "value"
						for (int i = 0; i < row.length; i++) {
							if (row[i] == null && 4 > dataWidth) {
								dataWidth = 4;
							} else if (row[i] != null && row[i].length() > dataWidth)
								dataWidth = row[i].length();
						}

						int titleWidth = 10;

						int totalWidth = dataWidth + titleWidth + 5;

						// step 2: print the header with line number
						sb.append(".");
						for (int i = 0; i < totalWidth; i++)
							sb.append("-");
						sb.append("." + "\n" + "|");

						int emptyCenterWidth = (totalWidth - title.length()) / 2;
						for (int i = 0; i < emptyCenterWidth; i++)
							sb.append(" ");
						sb.append(title);
						for (int i = 0; i < totalWidth - emptyCenterWidth - title.length(); i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// step 3: print "key" and "value"
						printLine(sb, titleWidth, dataWidth);

						sb.append("|" + " key");
						for (int i = 0; i < titleWidth - 2; i++)
							sb.append(" ");
						sb.append("|" + " value");
						for (int i = 0; i < dataWidth - 4; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						printLine(sb, titleWidth, dataWidth);

						// step 4: print dataset

						// for(int i=0; i<row.length; i++){
						sb.append("| " + "album");
						for (int i = 0; i < titleWidth - "album".length() + 1; i++)
							sb.append(" ");
						sb.append("| " + row[0]);
						for (int i = 0; row[0] == null && i < dataWidth - 3
								|| row[0] != null && i < dataWidth - row[0].length() + 1; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// }

						// for(int i=0; i<row.length; i++){
						sb.append("| " + "artist");
						for (int i = 0; i < titleWidth - "artist".length() + 1; i++)
							sb.append(" ");
						sb.append("| " + row[1]);
						for (int i = 0; row[1] == null && i < dataWidth - 3
								|| row[1] != null && i < dataWidth - row[1].length() + 1; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// }

						// for(int i=0; i<row.length; i++){
						sb.append("| " + "nombre_vue");
						for (int i = 0; i < titleWidth - "nombre_vue".length() + 1; i++)
							sb.append(" ");
						sb.append("| " + row[2]);
						for (int i = 0; row[2] == null && i < dataWidth - 3
								|| row[2] != null && i < dataWidth - row[2].length() + 1; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// }

						// step 5: print a line gap
						printLine(sb, titleWidth, dataWidth);
						return sb.toString();

					}

				}

				Util_tLogRow_1 util_tLogRow_1 = new Util_tLogRow_1();

				java.io.PrintStream consoleOut_tLogRow_1 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_1);
				}

				StringBuilder strBuffer_tLogRow_1 = null;
				int nb_line_tLogRow_1 = 0;
///////////////////////    			

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tMap_1_TMAP_IN begin ] start
				 */

				ok_Hash.put("tMap_1_TMAP_IN", false);
				start_Hash.put("tMap_1_TMAP_IN", System.currentTimeMillis());

				currentVirtualComponent = "tMap_1";

				currentComponent = "tMap_1_TMAP_IN";

				int tos_count_tMap_1_TMAP_IN = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1_TMAP_IN__Struct {
				}
				Var__tMap_1_TMAP_IN__Struct Var__tMap_1_TMAP_IN = new Var__tMap_1_TMAP_IN__Struct();
// ###############################

// ###############################
// # Outputs initialization
				youtube_infoStruct youtube_info_tmp = new youtube_infoStruct();
// ###############################

				/**
				 * [tMap_1_TMAP_IN begin ] stop
				 */

				/**
				 * [tMap_1_TMAP_IN main ] start
				 */

				currentVirtualComponent = "tMap_1";

				currentComponent = "tMap_1_TMAP_IN";

				boolean hasCasePrimitiveKeyWithNull_tMap_1_TMAP_IN = false;

				fsi_tMap_1_1.endPut();

				if (row1 == null) {
					row1 = new row1Struct();
				}

				// ###############################
				// # Input tables (lookups)
				boolean rejectedInnerJoin_tMap_1_TMAP_IN = false;
				boolean mainRowRejected_tMap_1_TMAP_IN = false;

				///////////////////////////////////////////////
				// Starting Lookup Table "row2"
				///////////////////////////////////////////////

				SortableRow_tMap_1_1 rsc_tMap_1_1;

				tHash_Lookup_row2.initGet();

				fsi_tMap_1_1.initGet();

				// TEST firstLookupIsPersistentSorted=true isFirstPersistentSortedTable=true

				rejectedInnerJoin_tMap_1_TMAP_IN = false;

				while (fsi_tMap_1_1.hasNext()) { // G_TM_M_250 loop "1"

					// CALL close loop of lookup '1'

					rsc_tMap_1_1 = (SortableRow_tMap_1_1) fsi_tMap_1_1.next();
					rsc_tMap_1_1.copyDataTo(row1);

					rejectedInnerJoin_tMap_1_TMAP_IN = rsc_tMap_1_1.is__rejectedInnerJoin;

					boolean forceLooprow2 = false;

					row2Struct row2ObjectFromLookup = null;

					if (!rejectedInnerJoin_tMap_1_TMAP_IN) { // G_TM_M_020

						hasCasePrimitiveKeyWithNull_tMap_1_TMAP_IN = false;

						row2HashKey.nom_video = rsc_tMap_1_1.exprKey_row2__nom_video;

						tHash_Lookup_row2.lookup(row2HashKey);

						if (!tHash_Lookup_row2.hasNext()) { // G_TM_M_090

							rejectedInnerJoin_tMap_1_TMAP_IN = true;

						} // G_TM_M_090

					} // G_TM_M_020

					row2Struct row2 = null;

					row2Struct fromLookup_row2 = null;
					row2 = row2Default;

					if (tHash_Lookup_row2 != null && tHash_Lookup_row2.hasNext()) { // G 099

						fromLookup_row2 = tHash_Lookup_row2.next();

					} // G 099

					if (fromLookup_row2 != null) {
						row2 = fromLookup_row2;
					}

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_1_TMAP_IN__Struct Var = Var__tMap_1_TMAP_IN;// ###############################
						// ###############################
						// # Output tables

						youtube_info = null;

						if (!rejectedInnerJoin_tMap_1_TMAP_IN) {

// # Output table : 'youtube_info'
							youtube_info_tmp.album = row1.album;
							youtube_info_tmp.artist = row1.artist;
							youtube_info_tmp.nombre_vue = nombre_vue_normalizer.NombreVueNormalizer(row2.nombre_vue);
							youtube_info = youtube_info_tmp;
						} // closing inner join bracket (2)
// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_1_TMAP_IN = false;

					tos_count_tMap_1_TMAP_IN++;

					/**
					 * [tMap_1_TMAP_IN main ] stop
					 */

					/**
					 * [tMap_1_TMAP_IN process_data_begin ] start
					 */

					currentVirtualComponent = "tMap_1";

					currentComponent = "tMap_1_TMAP_IN";

					/**
					 * [tMap_1_TMAP_IN process_data_begin ] stop
					 */
// Start of branch "youtube_info"
					if (youtube_info != null) {

						/**
						 * [tLogRow_1 main ] start
						 */

						currentComponent = "tLogRow_1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "youtube_info");
						}

///////////////////////		

						strBuffer_tLogRow_1 = new StringBuilder();

						if (youtube_info.album != null) { //

							strBuffer_tLogRow_1.append(String.valueOf(youtube_info.album));

						} //

						strBuffer_tLogRow_1.append("|");

						if (youtube_info.artist != null) { //

							strBuffer_tLogRow_1.append(String.valueOf(youtube_info.artist));

						} //

						strBuffer_tLogRow_1.append("|");

						if (youtube_info.nombre_vue != null) { //

							strBuffer_tLogRow_1.append(String.valueOf(youtube_info.nombre_vue));

						} //

						String[] row_tLogRow_1 = new String[3];

						if (youtube_info.album != null) { //
							row_tLogRow_1[0] = String.valueOf(youtube_info.album);

						} //

						if (youtube_info.artist != null) { //
							row_tLogRow_1[1] = String.valueOf(youtube_info.artist);

						} //

						if (youtube_info.nombre_vue != null) { //
							row_tLogRow_1[2] = String.valueOf(youtube_info.nombre_vue);

						} //

						nb_line_tLogRow_1++;
						consoleOut_tLogRow_1.println(util_tLogRow_1.print(row_tLogRow_1, nb_line_tLogRow_1));
						consoleOut_tLogRow_1.flush();
//////

//////                    

///////////////////////    			

						tos_count_tLogRow_1++;

						/**
						 * [tLogRow_1 main ] stop
						 */

						/**
						 * [tLogRow_1 process_data_begin ] start
						 */

						currentComponent = "tLogRow_1";

						/**
						 * [tLogRow_1 process_data_begin ] stop
						 */

						/**
						 * [tLogRow_1 process_data_end ] start
						 */

						currentComponent = "tLogRow_1";

						/**
						 * [tLogRow_1 process_data_end ] stop
						 */

					} // End of branch "youtube_info"

				} // G_TM_M_250 close loop read file data '1'

				/**
				 * [tMap_1_TMAP_IN process_data_end ] start
				 */

				currentVirtualComponent = "tMap_1";

				currentComponent = "tMap_1_TMAP_IN";

				/**
				 * [tMap_1_TMAP_IN process_data_end ] stop
				 */

				/**
				 * [tMap_1_TMAP_IN end ] start
				 */

				currentVirtualComponent = "tMap_1";

				currentComponent = "tMap_1_TMAP_IN";

// ###############################
// # Lookup hashes releasing
				fsi_tMap_1_1.endGet();

				if (tHash_Lookup_row2 != null) {
					tHash_Lookup_row2.endGet();
				}
				globalMap.remove("tHash_Lookup_row2");

// ###############################      

				ok_Hash.put("tMap_1_TMAP_IN", true);
				end_Hash.put("tMap_1_TMAP_IN", System.currentTimeMillis());

				/**
				 * [tMap_1_TMAP_IN end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

//////
//////
				globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "youtube_info");
				}

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tMap_1_TMAP_OUT finally ] start
				 */

				currentVirtualComponent = "tMap_1";

				currentComponent = "tMap_1_TMAP_OUT";

				/**
				 * [tMap_1_TMAP_OUT finally ] stop
				 */

				/**
				 * [tMap_1_TMAP_IN finally ] start
				 */

				currentVirtualComponent = "tMap_1";

				currentComponent = "tMap_1_TMAP_IN";

				/**
				 * [tMap_1_TMAP_IN finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements routines.system.IPersistableComparableLookupRow<row2Struct> {
		final static byte[] commonByteArrayLock_TALEND_TEST_testing = new byte[0];
		static byte[] commonByteArray_TALEND_TEST_testing = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String nom_video;

		public String getNom_video() {
			return this.nom_video;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String duree;

		public String getDuree() {
			return this.duree;
		}

		public Integer date_ajout;

		public Integer getDate_ajout() {
			return this.date_ajout;
		}

		public String nom_chaine;

		public String getNom_chaine() {
			return this.nom_chaine;
		}

		public String nombre_vue;

		public String getNombre_vue() {
			return this.nombre_vue;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.nom_video == null) ? 0 : this.nom_video.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.nom_video == null) {
				if (other.nom_video != null)
					return false;

			} else if (!this.nom_video.equals(other.nom_video))

				return false;

			return true;
		}

		public void copyDataTo(row2Struct other) {

			other.nom_video = this.nom_video;
			other.type = this.type;
			other.duree = this.duree;
			other.date_ajout = this.date_ajout;
			other.nom_chaine = this.nom_chaine;
			other.nombre_vue = this.nombre_vue;

		}

		public void copyKeysDataTo(row2Struct other) {

			other.nom_video = this.nom_video;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALEND_TEST_testing.length) {
					if (length < 1024 && commonByteArray_TALEND_TEST_testing.length == 0) {
						commonByteArray_TALEND_TEST_testing = new byte[1024];
					} else {
						commonByteArray_TALEND_TEST_testing = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALEND_TEST_testing, 0, length);
				strReturn = new String(commonByteArray_TALEND_TEST_testing, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALEND_TEST_testing) {

				try {

					int length = 0;

					this.nom_video = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.nom_video, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.type = readString(dis, ois);

				this.duree = readString(dis, ois);

				this.date_ajout = readInteger(dis, ois);

				this.nom_chaine = readString(dis, ois);

				this.nombre_vue = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.type, dos, oos);

				writeString(this.duree, dos, oos);

				writeInteger(this.date_ajout, dos, oos);

				writeString(this.nom_chaine, dos, oos);

				writeString(this.nombre_vue, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("nom_video=" + nom_video);
			sb.append(",type=" + type);
			sb.append(",duree=" + duree);
			sb.append(",date_ajout=" + String.valueOf(date_ajout));
			sb.append(",nom_chaine=" + nom_chaine);
			sb.append(",nombre_vue=" + nombre_vue);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.nom_video, other.nom_video);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();

				/**
				 * [tAdvancedHash_row2 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row2", false);
				start_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tAdvancedHash_row2 = 0;

				// connection name:row2
				// source node:tFileInputDelimited_2 - inputs:(after_tFileInputDelimited_1)
				// outputs:(row2,row2) | target node:tAdvancedHash_row2 - inputs:(row2)
				// outputs:()
				// linked node: tMap_1 - inputs:(row1,row2) outputs:(youtube_info)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row2Struct> tHash_Lookup_row2 = new org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row2Struct>(
						matchingModeEnum_row2,
						"/home/hicham/Downloads/TOS_DI-20200219_1130-V7.3.1/workspace/temp" + "/" + jobName
								+ "_tMapData_" + pid + "_Lookup_row2_",
						new org.talend.designer.components.persistent.IRowCreator() {
							public row2Struct createRowInstance() {
								return new row2Struct();
							}
						}

						, 2000000

				);

				tHash_Lookup_row2.initPut();

				globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);

				/**
				 * [tAdvancedHash_row2 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_2", false);
				start_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_2";

				int tos_count_tFileInputDelimited_2 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_2 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_2 = null;
				int limit_tFileInputDelimited_2 = -1;
				try {

					Object filename_tFileInputDelimited_2 = "/home/hicham/git-repositories/datascale/qualité_des_données/projet/data_quality _S3.tsv";
					if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_2 = 0, random_value_tFileInputDelimited_2 = -1;
						if (footer_value_tFileInputDelimited_2 > 0 || random_value_tFileInputDelimited_2 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_2 = new org.talend.fileprocess.FileInputDelimited(
								"/home/hicham/git-repositories/datascale/qualité_des_données/projet/data_quality _S3.tsv",
								"UTF-8", "\t", "\n", false, 1, 0, limit_tFileInputDelimited_2, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_2 != null && fid_tFileInputDelimited_2.nextRecord()) {
						rowstate_tFileInputDelimited_2.reset();

						row2 = null;

						row2 = null;

						boolean whetherReject_tFileInputDelimited_2 = false;
						row2 = new row2Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_2 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_2 = 0;

							row2.nom_video = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 1;

							row2.type = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 2;

							row2.duree = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 3;

							temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									row2.date_ajout = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"date_ajout", "row2", temp, ex_tFileInputDelimited_2),
											ex_tFileInputDelimited_2));
								}

							} else {

								row2.date_ajout = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 4;

							row2.nom_chaine = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 5;

							row2.nombre_vue = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							if (rowstate_tFileInputDelimited_2.getException() != null) {
								throw rowstate_tFileInputDelimited_2.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_2 = true;

							System.err.println(e.getMessage());
							row2 = null;

						}

						/**
						 * [tFileInputDelimited_2 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_2 main ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						tos_count_tFileInputDelimited_2++;

						/**
						 * [tFileInputDelimited_2 main ] stop
						 */

						/**
						 * [tFileInputDelimited_2 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						/**
						 * [tFileInputDelimited_2 process_data_begin ] stop
						 */
// Start of branch "row2"
						if (row2 != null) {

							/**
							 * [tAdvancedHash_row2 main ] start
							 */

							currentComponent = "tAdvancedHash_row2";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row2");
							}

							row2Struct row2_HashRow = tHash_Lookup_row2.getNextFreeRow();

							row2_HashRow.nom_video = row2.nom_video;

							row2_HashRow.type = row2.type;

							row2_HashRow.duree = row2.duree;

							row2_HashRow.date_ajout = row2.date_ajout;

							row2_HashRow.nom_chaine = row2.nom_chaine;

							row2_HashRow.nombre_vue = row2.nombre_vue;

							tHash_Lookup_row2.put(row2_HashRow);

							tos_count_tAdvancedHash_row2++;

							/**
							 * [tAdvancedHash_row2 main ] stop
							 */

							/**
							 * [tAdvancedHash_row2 process_data_begin ] start
							 */

							currentComponent = "tAdvancedHash_row2";

							/**
							 * [tAdvancedHash_row2 process_data_begin ] stop
							 */

							/**
							 * [tAdvancedHash_row2 process_data_end ] start
							 */

							currentComponent = "tAdvancedHash_row2";

							/**
							 * [tAdvancedHash_row2 process_data_end ] stop
							 */

						} // End of branch "row2"

						/**
						 * [tFileInputDelimited_2 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						/**
						 * [tFileInputDelimited_2 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_2 end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

					}
				} finally {
					if (!((Object) ("/home/hicham/git-repositories/datascale/qualité_des_données/projet/data_quality _S3.tsv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_2 != null) {
							fid_tFileInputDelimited_2.close();
						}
					}
					if (fid_tFileInputDelimited_2 != null) {
						globalMap.put("tFileInputDelimited_2_NB_LINE", fid_tFileInputDelimited_2.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_2", true);
				end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_2 end ] stop
				 */

				/**
				 * [tAdvancedHash_row2 end ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				tHash_Lookup_row2.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				ok_Hash.put("tAdvancedHash_row2", true);
				end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row2 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_2 finally ] start
				 */

				currentComponent = "tFileInputDelimited_2";

				/**
				 * [tFileInputDelimited_2 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row2 finally ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				/**
				 * [tAdvancedHash_row2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final testing testingClass = new testing();

		int exitCode = testingClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = testing.class.getClassLoader()
					.getResourceAsStream("talend_test/testing_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = testing.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputDelimited_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_1) {
			globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

			e_tFileInputDelimited_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : testing");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 85485 characters generated by Talend Open Studio for Data Integration on the
 * November 20, 2020 at 9:05:38 AM CET
 ************************************************************************************************/